import math

table = [
    ("pi", math.pi),
    ("e", math.e),
    ("tau", math.tau),
    ("c0", 0.0),
    ("c1", 1.0),
    ("c2", 2.0),
    ("c3", 3.0),
    ("c4", 4.0),
    ("c5", 5.0),
    ("c10", 10.0),
    ("frac2", 0.5),
    ("frac3", 1.0 / 3.0),
    ("frac4", 0.25),
    ("frac5", 0.2),
    ("frac10", 0.1),
    ("frac_pi", 1 / math.pi),
    ("frac_e", 1 / math.e),
    ("sqrt2", math.sqrt(2.0)),
    ("sqrt3", math.sqrt(3.0)),
    ("sqrt5", math.sqrt(5.0)),
    ("sqrt10", math.sqrt(10.0)),
    ("frac_180_pi", 180.0 / math.pi),
    ("frac_pi_180", math.pi / 180.0),
    ("sin0", 0.0),
    ("sin15", math.sin(math.pi / 12.0)),
    ("sin30", math.sin(math.pi / 6.0)),
    ("sin45", math.sin(math.pi / 4.0)),
    ("sin60", math.sin(math.pi / 3.0)),
    ("sin75", math.sin(math.pi / 12.0 * 5.0)),
    ("sin90", 1.0),
    ("cos0", 1.0),
    ("cos15", math.cos(math.pi / 12.0)),
    ("cos30", math.cos(math.pi / 6.0)),
    ("cos45", math.cos(math.pi / 4.0)),
    ("cos60", math.cos(math.pi / 3.0)),
    ("cos75", math.cos(math.pi / 12.0 * 5.0)),
    ("cos90", 0.0),
    ("tan0", 0.0),
    ("tan15", math.tan(math.pi / 12.0)),
    ("tan30", math.tan(math.pi / 6.0)),
    ("tan45", 1.0),
    ("tan60", math.tan(math.pi / 3.0)),
    ("tan75", math.tan(math.pi / 12.0 * 5.0)),
    ("tan90", math.inf),
    ("max_value", math.inf),
    ("min_value", -math.inf),
]


def auto_gen_real_ext():
    with open(__file__ + "/../real_ext.rs", "w") as file:
        file.write("\n".join([
            "// This file is auto generated by auto_gen.py",
            "// Do not modify it directly.",
            "// You can edit auto_gen.py to change the file's content.",
            "",
            "#![cfg_attr(rustfmt, rustfmt_skip)]",
            "",
            "use crate::fx::{ff, Fx};",
            "",
            "pub trait RealExt {",
            *[real_ext_trait(fn) for (fn, val) in table],
            "}",
            "",
            "impl RealExt for Fx {",
            *[real_ext_fx(fn, val) for (fn, val) in table],
            "}",
            "",
            "impl RealExt for f64 {",
            *[real_ext_f64(fn, val) for (fn, val) in table],
            "}",
            "",
            "impl RealExt for f32 {",
            *[real_ext_f32(fn, val) for (fn, val) in table],
            "}",
            "",
        ]))


def real_ext_trait(fn):
    return "    fn %s() -> Self;" % fn


def real_ext_fx(fn, val):
    if val == math.inf:
        return "    #[inline(always)] fn %s() -> Self { ff(f64::INFINITY) }" % fn
    elif val == -math.inf:
        return "    #[inline(always)] fn %s() -> Self { ff(-f64::INFINITY) }" % fn
    else:
        return "    #[inline(always)] fn %s() -> Self { ff(%5.16f) }" % (fn, val)


def real_ext_f64(fn, val):
    if val == math.inf:
        return "    #[inline(always)] fn %s() -> Self { f64::INFINITY }" % fn
    elif val == -math.inf:
        return "    #[inline(always)] fn %s() -> Self { -f64::INFINITY }" % fn
    else:
        return "    #[inline(always)] fn %s() -> Self { %5.16f }" % (fn, val)


def real_ext_f32(fn, val):
    if val == math.inf:
        return "    #[inline(always)] fn %s() -> Self { f32::INFINITY }" % fn
    if val == -math.inf:
        return "    #[inline(always)] fn %s() -> Self { -f32::INFINITY }" % fn
    else:
        return "    #[inline(always)] fn %s() -> Self { %5.16f }" % (fn, val)


auto_gen_real_ext()
